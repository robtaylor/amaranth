name: Tutorial Code Test

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/tutorial.rst'
      - 'docs/_code/**'
      - '.github/workflows/tutorial-test.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/tutorial.rst'
      - 'docs/_code/**'
      - '.github/workflows/tutorial-test.yml'
  workflow_dispatch:  # Allow manual trigger

jobs:
  validate-tutorial:
    name: Validate Tutorial Content
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check tutorial refers to existing files
        run: |
          # Extract code filename references from tutorial.rst
          TUTORIAL_FILES=$(grep -o "_code/[a-zA-Z_]*\.py" docs/tutorial.rst | cut -d'/' -f2 | sort | uniq)
          
          echo "Files mentioned in tutorial.rst:"
          echo "$TUTORIAL_FILES"
          
          # Check if each mentioned file exists in docs/_code/
          for file in $TUTORIAL_FILES; do
            if [ ! -f "docs/_code/$file" ]; then
              echo "Error: $file mentioned in tutorial.rst but missing from docs/_code/"
              exit 1
            else
              echo "✓ Found docs/_code/$file"
            fi
          done
  
  test-tutorial:
    name: Test Tutorial Code (${{ matrix.example.name }})
    runs-on: ubuntu-latest
    needs: validate-tutorial
    strategy:
      fail-fast: false
      matrix:
        example:
          - name: and_gate
            file: and_gate.py
            output_files: and_gate.v
            check_cmd: ls -la and_gate.v && head -n 10 and_gate.v
          - name: blinky
            file: blinky.py
            output_files: blinky.vcd
            check_cmd: ls -la blinky.vcd
          - name: up_counter
            file: up_counter.py
            output_files: up_counter.vcd up_counter.v
            check_cmd: ls -la up_counter.v && head -n 10 up_counter.v
          - name: uart_receiver
            file: uart_receiver.py
            output_files: uart_rx.v
            check_cmd: ls -la uart_rx.v && head -n 10 uart_rx.v
          - name: uart_sim
            file: uart_sim.py
            output_files: uart_sim.vcd
            check_cmd: ls -la uart_sim.vcd
          - name: controlled_blinker
            file: controlled_blinker.py
            output_files: blinker_system.v blinker_system.vcd
            check_cmd: ls -la blinker_system.v blinker_system.vcd && head -n 10 blinker_system.v
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python and PDM
        uses: pdm-project/setup-pdm@v3
        with:
          python-version: '3.9'
          cache: true
          cache-dependency-path: "**/pyproject.toml"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gtkwave
          pdm install
          
      - name: Set CI environment variable
        run: echo "CI=true" >> $GITHUB_ENV

      - name: Run ${{ matrix.example.name }} example
        run: |
          pdm run python docs/_code/${{ matrix.example.file }}
          ${{ matrix.example.check_cmd }}

      - name: Verify waveform files with GTKWave
        if: contains(matrix.example.output_files, '.vcd')
        run: |
          gtkwave -V
          for vcd_file in *.vcd; do
            if [ -f "$vcd_file" ]; then
              echo "Verifying $vcd_file with GTKWave..."
              gtkwave -V "$vcd_file" || true
            fi
          done
          
      - name: Generate test summary
        run: |
          echo "## ${{ matrix.example.name }} Test Result" > summary.md
          
          # Check if all expected output files exist
          OUTPUT_FILES="${{ matrix.example.output_files }}"
          ALL_FILES_EXIST=true
          
          for file in $OUTPUT_FILES; do
            if [ -f "$file" ]; then
              echo "- $file: ✅ Pass" >> summary.md
            else
              echo "- $file: ❌ Fail" >> summary.md
              ALL_FILES_EXIST=false
            fi
          done
          
          cat summary.md
          
          if [ "$ALL_FILES_EXIST" = "false" ]; then
            exit 1
          fi

      - name: Archive generated files
        uses: actions/upload-artifact@v4
        with:
          name: tutorial-${{ matrix.example.name }}-output
          path: |
            *.v
            *.vcd
            summary.md
            
  collect-results:
    name: Collect Test Results
    runs-on: ubuntu-latest
    needs: test-tutorial
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Generate combined summary
        run: |
          echo "## Tutorial Code Test Results" > combined_summary.md
          echo "| Example | Status |" >> combined_summary.md
          echo "|---------|--------|" >> combined_summary.md
          
          # Process each example's summary
          for dir in artifacts/tutorial-*-output; do
            example=$(basename "$dir" | sed 's/tutorial-\(.*\)-output/\1/')
            
            if grep -q "❌ Fail" "$dir/summary.md"; then
              status="❌ Fail"
            else
              status="✅ Pass"
            fi
            
            echo "| $example | $status |" >> combined_summary.md
          done
          
          echo "Combined Summary:"
          cat combined_summary.md
          
          # Fail if any example failed
          if grep -q "❌ Fail" combined_summary.md; then
            exit 1
          fi
          
      - name: Archive combined summary
        uses: actions/upload-artifact@v4
        with:
          name: tutorial-test-summary
          path: combined_summary.md